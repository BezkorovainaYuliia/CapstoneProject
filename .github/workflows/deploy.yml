name: filmastoria.onrender.com Deployment

on:
  push:
    branches:
      - master

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Upload Frontend-Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/*

  build-backend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Frontend-Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/src/main/resources/static

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Backend mit Maven
        run: mvn -B package --file backend/pom.xml

      - name: Upload Filmbd.jar
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: backend/target/filmdb.jar

  push-to-docker-hub:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend Artefakt
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: backend/target/

      - name: Login to Docker Hub
        uses: docker/login-action@2f6c983e22fd9f2af48f8eacee5e70ae8e8ed6e8
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}

      - name: Build Docker image
        env:
          APP_URL: ${{ secrets.APP_URL }}
          APP_CORS_LINKS: ${{ secrets.APP_CORS_LINKS }}
          DOCKER_IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
        run: |
          docker build \
            --build-arg APP_URL=$APP_URL \
            --build-arg APP_CORS_LINKS=$APP_CORS_LINKS \
            -t $DOCKER_IMAGE_TAG .

      - name: Push Docker image
        env:
          DOCKER_IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
        run: docker push $DOCKER_IMAGE_TAG

  deploy:
    needs: push-to-docker-hub
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deployment
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: curl -X POST "$RENDER_DEPLOY_HOOK"
